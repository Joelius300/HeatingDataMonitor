@page "/"
@using DataHandler
@inject DataStorage dataStorage
@implements IDisposable

<h1>Aktueller Zustand</h1>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Kessel</th>
                <th>Boiler</th>
                <th>Puffer oben</th>
                <th>Puffer unten</th>
                <th>Aussen</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@data.Kessel.WithUnit("°C")</td>
                <td>@data.Boiler_1.WithUnit("°C")</td>
                <td>@data.Puffer_Oben.WithUnit("°C")</td>
                <td>@data.Puffer_Unten.WithUnit("°C")</td>
                <td>@data.Aussen.WithUnit("°C")</td>
            </tr>
        </tbody>
    </table>
}

@functions{
    private Action? newDataReceived;
    private Data? data;

    protected override void OnInitialized()
    {
        // sub optimal because async void
        newDataReceived = async () =>
        {
            data = dataStorage.CurrentData;
            await base.InvokeAsync(base.StateHasChanged);
        };

        dataStorage.NewDataReceived += newDataReceived;

        newDataReceived();
        base.OnInitialized();
    }

    public void Dispose() {
        dataStorage.NewDataReceived -= newDataReceived;
    }
}