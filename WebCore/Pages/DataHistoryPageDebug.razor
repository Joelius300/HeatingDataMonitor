@page "/dataHistoryDebug"
@page "/dataHistoryDebug/{DaysBack:int}"
@page "/dataHistoryDebug/{DaysBack:int}/{Offset:int}"
@using DataHistory
@using DataHandler
@using System.Drawing;
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.Util.Color
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.LineChart.Axes
@using ChartJs.Blazor.ChartJS.LineChart.Axes.Ticks
@using Microsoft.EntityFrameworkCore;
@inject IJSRuntime jsRuntime
@inject IHistoryRepository repos

<h2>Line Time Chart</h2>
@if (errorMsg == null)
{
    <ChartJsLineChart @ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />
}
else
{
    <p>@errorMsg</p>
}

@functions
{
    [Parameter]
    public int DaysBack { get; set; } = 7;
    [Parameter]
    public int Offset { get; set; } = 0;

    LineChartConfig lineChartConfig;
    ChartJsLineChart lineChartJs;
    const string de_ch = "de-ch";
    private bool localeChangeWasAttempted = false;

    private string errorMsg = "Loading..";

    private async Task TryChangeLocale()
    {
        if (localeChangeWasAttempted) return;
        localeChangeWasAttempted = true;

        var locales = await jsRuntime.GetAvailableLocales();
        bool localeChanged = false;
        if (locales != null && locales.Contains(de_ch))
        {
            localeChanged = await jsRuntime.ChangeLocale(de_ch);
        }

        if (!localeChanged) Console.WriteLine($"Locale was not changed to {de_ch}. Either it already is {de_ch} or this locale doesn't exist.");
    }

    protected override void OnInit()
    {
        bool historyAvailable = repos != null;
        if (historyAvailable) SetupChart();
        else errorMsg = "Es wurde keine History konfiguriert.";
    }

    private void SetupChart()
    {
        var now = DateTime.Now;

        if (Offset > 0)
        {
            now = now.AddDays(-1 * Offset);
        }

        // get the data of the days we want
        IQueryable<Data> data = repos.GetDataBetween(now.AddDays(-1 * DaysBack), now);

        var actualData = data
            .Select(d => new    // only takes those columns that are required
            {
                d.DatumZeit,
                d.Kessel,
                d.Boiler_1,
                d.Puffer_Oben,
                d.Puffer_Unten
            })
            .AsEnumerable();    // from here on, use client-side eval

        if(DaysBack >= 100)
        {
            actualData = actualData
                .GroupBy(d => new DateTime(d.DatumZeit.Year, d.DatumZeit.Month, d.DatumZeit.Day, 0, 0, 0))
                .Select(g => g.First())
                .ToList();
        }
        else if(DaysBack >= 75)
        {
            actualData = actualData
                .GroupBy(d => new DateTime(d.DatumZeit.Year, d.DatumZeit.Month, d.DatumZeit.Day, d.DatumZeit.Hour.RoundUpHours(10), 0, 0))
                .Select(g => g.First())
                .ToList();
        }
        else if(DaysBack >= 50)
        {
            actualData = actualData
                .GroupBy(d => new DateTime(d.DatumZeit.Year, d.DatumZeit.Month, d.DatumZeit.Day, d.DatumZeit.Hour.RoundUpHours(5), 0, 0))
                .Select(g => g.First())
                .ToList();
        }
        else if (DaysBack >= 30)
        {
            actualData = actualData
                .GroupBy(d => new DateTime(d.DatumZeit.Year, d.DatumZeit.Month, d.DatumZeit.Day, d.DatumZeit.Hour.RoundUpHours(2), 0, 0))
                .Select(g => g.First())
                .ToList();
        }
        else
        {
            actualData = actualData
                .GroupBy(d => new DateTime(d.DatumZeit.Year, d.DatumZeit.Month, d.DatumZeit.Day, d.DatumZeit.Hour, 0, 0))
                .Select(g => g.First())
                .ToList();
        }

        lineChartConfig = new LineChartConfig
        {
            CanvasId = "dataHistoryCanvas0",
            Options = new LineChartOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Data history"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm",
                                DisplayFormats = TimeDisplayFormats.DE_CH,
                                IsoWeek = true
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        var kesselDataSet = new LineChartDataset<TimeTupel<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Orange),
            BorderColor = ColorUtil.FromDrawingColor(Color.Orange),
            Label = "Kessel",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        kesselDataSet.AddRange(actualData.Select(d => new TimeTupel<float>(d.DatumZeit, d.Kessel ?? -1)));
        lineChartConfig.Data.Datasets.Add(kesselDataSet);

        var boilerDataSet = new LineChartDataset<TimeTupel<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(Color.DarkRed),
            BorderColor = ColorUtil.FromDrawingColor(Color.DarkRed),
            Label = "Boiler",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        boilerDataSet.AddRange(actualData.Select(d => new TimeTupel<float>(d.DatumZeit, d.Boiler_1 ?? -1)));
        lineChartConfig.Data.Datasets.Add(boilerDataSet);

        var pufferObenDataSet = new LineChartDataset<TimeTupel<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Blue),
            BorderColor = ColorUtil.FromDrawingColor(Color.Blue),
            Label = "Puffer Oben",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            Hidden = true
        };

        pufferObenDataSet.AddRange(actualData.Select(d => new TimeTupel<float>(d.DatumZeit, d.Puffer_Oben ?? -1)));
        lineChartConfig.Data.Datasets.Add(pufferObenDataSet);

        var pufferUntenDataSet = new LineChartDataset<TimeTupel<float>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(Color.LightBlue),
            BorderColor = ColorUtil.FromDrawingColor(Color.LightBlue),
            Label = "Puffer Unten",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 1,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            Hidden = true
        };

        pufferUntenDataSet.AddRange(actualData.Select(d => new TimeTupel<float>(d.DatumZeit, d.Puffer_Unten ?? -1)));
        lineChartConfig.Data.Datasets.Add(pufferUntenDataSet);

        errorMsg = null;
    }

    protected override async Task OnAfterRenderAsync()
    {
        await TryChangeLocale();
    }
}
