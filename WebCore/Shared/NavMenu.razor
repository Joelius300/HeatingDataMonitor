@using DataHandler
@using static DataHandler.FormatExtensions
@inject RaspberryPIUtils.RaspberryPI raspi
@inject DataStorage dataStorage
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Heizungsmonitor</a>
    <button class="navbar-toggler" @onclick="@ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="@ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px3 flow-item">
            <div class="smallItem">
                <p style="font-weight: bold">Temp:</p>
                <p>@temp.WithUnit("°C", "###")</p>
            </div>
            <div class="smallItem">
                <p style="font-weight: bold">Freq:</p>
                <p>@freq.WithUnit("MHz.", "###")</p>
            </div>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Übersicht
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="detailsRelevant" Match="NavLinkMatch.All">
                <span class="oi oi-info" aria-hidden="true"></span> Details (relevant)
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="detailsAll" Match="NavLinkMatch.All">
                <span class="oi oi-plus" aria-hidden="true"></span> Details (alle)
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="dataHistory" Match="NavLinkMatch.All">
                <span class="oi oi-plus" aria-hidden="true"></span> History
            </NavLink>
        </li>
    </ul>
</div>

@functions {
    private decimal? temp;
    private int? freq;

    private Action newDataReceived;

    protected override void OnInitialized()
    {
        // sub optimal because async void
        newDataReceived = async () =>
        {
            temp = raspi.GetCurrentTemp();
            freq = raspi.GetCurrentFrequency();
            await base.InvokeAsync(base.StateHasChanged);
        };

        dataStorage.NewDataReceived += newDataReceived;

        newDataReceived();
        base.OnInitialized();
    }

    public void Dispose() {
        dataStorage.NewDataReceived -= newDataReceived;
    }


    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}